#!/usr/bin/env python

import os
import logging
from argparse import ArgumentParser
from inspect import getmembers, isfunction
from importlib.util import spec_from_file_location, module_from_spec

logger = logging.getLogger('benchmarker')


def benchmark(loc):
    # By default, just run in this directory
    if loc is None:
        loc = '.'

    # Extract a function name, if it was included.
    if loc.count(':') == 0:
        func_name = None
    elif loc.count(':') == 1:
        loc, func_name = loc.split(':')
    else:
        raise ValueError(f"Invalid loc: {loc}")

    # Check if the location exists, and whether it is a directory or file.
    # Handle the file case by recursively calling this function for each file.
    if not os.path.exists(loc):
        raise ValueError(f"No such file or directory: {loc}")
    elif os.path.isdir(loc):
        if func_name is not None:
            raise ValueError("To specify function, location must be a file.")
        for file in os.listdir(loc):
            new_path = os.path.join(loc, file)
            if ('test' in file and os.path.isfile(new_path)
                    and new_path.endswith('.py')):
                benchmark(new_path)
        return

    # Handle the case a file is specified.
    if not loc.endswith('.py'):
        raise ValueError(f"Location {loc} is not a python file.")
    print("="*len(loc))
    print(loc)
    print('-'*len(loc))
    mod_name = loc.replace('.py', '').replace('/', '.')
    spec = spec_from_file_location(mod_name, loc)
    test_module = module_from_spec(spec)
    try:
        spec.loader.exec_module(test_module)
    except Exception as err:
        logger.error(f"Failed to load {loc}, skipping...")
        logger.exception(err)
        return

    # Run tests
    tests = (f for f, _ in getmembers(test_module, isfunction) if 'test' in f)
    for test_name in tests:
        print(test_name)
        print('-'*len(test_name))
        test = getattr(test_module, test_name)
        try:
            test()
            print('-'*len(test_name))
            print("PASSED!")
        except Exception as e:
            print('-'*len(test_name))
            print("FAILED!")
            print(e)
        print('-'*len(test_name))

    return


parser = ArgumentParser(description=('Run tests and benchmark time to run and '
                                     'errors.'))
parser.add_argument(dest='location')

if __name__ == '__main__':
    args = parser.parse_args()
    benchmark(args.location)
