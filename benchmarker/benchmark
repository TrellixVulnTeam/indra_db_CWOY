#!/usr/bin/env python
from collections import defaultdict, Iterable
from datetime import datetime
from argparse import ArgumentParser

from numpy import array

from benchmarker.util import *


def main():
    start_time = datetime.utcnow()
    parser = ArgumentParser(
        description=('Run tests and benchmark time to run and '
                     'errors.'))
    subparsers = parser.add_subparsers(
        dest='task',
        help="Select the action you wish to perform."
    )

    # Set up the run parser
    run_parser = subparsers.add_parser('run', help='Run benchmark tests.')
    run_parser.add_argument(dest='location',
                            help='The location of the test file or directory.')
    run_parser.add_argument(dest='stack_name',
                            help='The name of the Readonly stack being tested.')
    run_parser.add_argument(dest='api_name',
                            help=('The name of the dependant API being tested. '
                                  'This label is used to group test results on '
                                  's3. Whenever possible, try to use existing '
                                  'labels.'))
    run_parser.add_argument('-r',
                            dest='inner_runs',
                            default=1,
                            choices=range(1, 101),
                            type=int,
                            help=('Select the number of times to repeat the '
                                  'test in a row.'))
    run_parser.add_argument('-R',
                            dest='outer_runs',
                            default=1,
                            choices=range(1, 101),
                            type=int,
                            help=('Select the number of times to repeat the '
                                  'entire suite of tests.'))

    # Setup the list parser
    list_parser = subparsers.add_parser('list', help='List certain properties.')
    list_parser.add_argument(choices=['apis', 'stacks'], dest='list_scope')

    # Parse the arguments, run the code.
    args = parser.parse_args()
    if args.task == 'list':
        # Just list some information.
        if args.list_scope == 'apis':
            for api in list_apis():
                print(api)
        elif args.list_scope == 'stacks':
            for stack_name in list_stacks():
                print(stack_name)
    elif args.task == 'run':
        # Run the benchmarker. Run it `outer_run` times, and we will aggregate
        # the results below.
        result_list = []
        for i in range(args.outer_runs):
            run_result = benchmark(args.location, num_runs=args.inner_runs)
            result_list.append(run_result)

        # Aggregate the results from above, either adding values to the list
        # or extending a list.
        results = {}
        for test_name in run_result.keys():
            test_results = defaultdict(list)
            for this_result in result_list:
                test_data = this_result[test_name]
                for data_name, data_val in test_data.items():
                    if isinstance(data_val, Iterable):
                        test_results[data_name].extend(data_val)
                    else:
                        test_results[data_name].append(data_val)

            # Convert the default dict into a real dict.
            test_results = dict(test_results)

            # Turn the time data into an array, and calculate mean and std dev.
            time_data = array(test_results['times'])
            test_results['duration'] = time_data.mean()
            test_results['deviation'] = time_data.std()

            # Calculate the overall pass rate.
            test_results['passed'] = sum(test_results['passed'])/args.outer_runs

            # Add this test's aggregated results to the results object.
            results[test_name] = test_results

        for test, stats in results.items():
            print(test, stats['passed'], stats['duration'], stats['deviation'])
        save_results(start_time, args.api_name, args.stack_name, results)


if __name__ == '__main__':
    main()
